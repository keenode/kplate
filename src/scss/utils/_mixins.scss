/** --------------------------------------------------------
    utils/_mixins.scss
    --------------------------------------------------------
    @author Keenan Staffieri
    Utility mixins.
    -------------------------------------------------------- */

/**
    Populate CSS propeties from a single map item with
    property values.

    @params $element - Element map to scan properties on.
*/
@mixin populate-properties($element) {

    // display
    @if map-has-key($element, 'display') {
        display: map-get($element, 'display');
    }
    // width
    @if map-has-key($element, 'width') {
        width: map-get($element, 'width');
    }
    // height
    @if map-has-key($element, 'height') {
        height: map-get($element, 'height');
    }
    // margin
    @if map-has-key($element, 'margin') {
        margin: map-get($element, 'margin');
    }
    // margin-top
    @if map-has-key($element, 'margin-top') {
        margin-top: map-get($element, 'margin-top');
    }
    // margin-right
    @if map-has-key($element, 'margin-right') {
        margin-right: map-get($element, 'margin-right');
    }
    // margin-bottom
    @if map-has-key($element, 'margin-bottom') {
        margin-bottom: map-get($element, 'margin-bottom');
    }
    // margin-left
    @if map-has-key($element, 'margin-left') {
        margin-left: map-get($element, 'margin-left');
    }
    // padding
    @if map-has-key($element, 'padding') {
        padding: map-get($element, 'padding');
    }
    // padding-top
    @if map-has-key($element, 'padding-top') {
        padding-top: map-get($element, 'padding-top');
    }
    // padding-right
    @if map-has-key($element, 'padding-right') {
        padding-right: map-get($element, 'padding-right');
    }
    // padding-bottom
    @if map-has-key($element, 'padding-bottom') {
        padding-bottom: map-get($element, 'padding-bottom');
    }
    // padding-left
    @if map-has-key($element, 'padding-left') {
        padding-left: map-get($element, 'padding-left');
    }
    // background-color
    @if map-has-key($element, 'background-color') {
        background-color: theme-color(map-get($element, 'background-color'));
    }
    // color
    @if map-has-key($element, 'color') {
        color: theme-color(map-get($element, 'color'));
    }
    // font-family
    @if map-has-key($element, 'font-family') {
        font-family: theme-font-family(map-get($element, 'font-family'));
    }
    // font-size
    @if map-has-key($element, 'font-size') {
        font-size: map-get($element, 'font-size');
    }
    // font-weight
    @if map-has-key($element, 'font-weight') {
        font-weight: map-get($element, 'font-weight');
    }
    // font-style
    @if map-has-key($element, 'font-style') {
        font-style: unquote(map-get($element, 'font-style'));
    }
    // line-height
    @if map-has-key($element, 'line-height') {
        line-height: map-get($element, 'line-height');
    }
    // text-decoration
    @if map-has-key($element, 'text-decoration') {
        text-decoration: map-get($element, 'text-decoration');
    }
    // text-rendering
    @if map-has-key($element, 'font-antialias') {
        @if map-get($element, 'font-antialias') == true {
            -webkit-font-smoothing: antialiased;
        }
    }
    // text-rendering
    @if map-has-key($element, 'font-optimizelegibility') {
        @if map-get($element, 'font-optimizelegibility') == true {
            text-rendering: optimizeLegibility;
        }
    }
    // cursor
    @if map-has-key($element, 'cursor') {
        cursor: unquote(map-get($element, 'cursor'));
    }
    // transition
    @if map-has-key($element, 'transition') {
        transition: unquote(map-get($element, 'transition'));
    }
}


/**
    Generate valid media queries with associate properties
    from a map containing properties.

    @params $element - Element map to scan properties on.
*/
@mixin responsive-styles($element) {

    @if map-has-key($element, 'responsive') {

        $responsive-queries: map-get($element, 'responsive');

        // Get total number of button variations
        $num-queries: 1;

        @if type-of($responsive-queries) == list {
            $num-queries: length($responsive-queries);
        }

        @for $i from 1 through $num-queries {

            $media-query: $responsive-queries;

            @if type-of($responsive-queries) == list {
                $media-query: nth($responsive-queries, $i);
            }

            $query-breakpoint: map-get($media-query, 'breakpoint');

            @include media($query-breakpoint) {
                @include populate-properties($media-query);
            }
        }
    }
}


/// Prints a map as a CSS rule
/// @param {Map} $map
 
@mixin debug-map($map) {
    @at-root {
        @debug-map {
            __toString__: inspect($map);
            __length__: length($map);
            __depth__: depth($map);
            __keys__: map-keys($map);
            __properties__ {
                @each $key, $value in $map {
                    #{'(' + type-of($value) + ') ' + $key}: inspect($value);
                }
            }
        }
    }
}

// Example Usage:
// @include debug-map($themes);
